apply plugin: 'maven'
apply plugin: 'signing'

def repoUrl = 'http://scm.linzihong.com/nexus/content/repositories/releases/'
def siteUrl = 'https://www.kerkee.com'                        // #CONFIG# // project homepage
def gitUrl = 'https://github.com/kercer/kerkee_android.git'                     // #CONFIG# // project git
def libName = 'kerdb'

group = "com.kercer"
//version = "1.3.0" //set in pom.project

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        repository(url: repoUrl) {
            user = properties.getProperty("maven.user")
            pw = properties.getProperty("maven.password")
            authentication(userName: user,
                    password: pw)
        }

        pom.project {
            name libName
            packaging 'aar'
            description libName
            url repoUrl
//            groupId 'com.kercer'
            artifactId libName //LibA
            version android.defaultConfig.versionName

            // Set your license
            licenses {
                license {
                    name 'GNU GENERAL PUBLIC LICENSE, Version 3'
                    url 'http://www.gnu.org/licenses/'
                }
            }

            developers {
                developer {
                    id 'zihong'                                           // #CONFIG# // your user id (you can write your nickname)
                    name 'zihong'                                       // #CONFIG# // your user name
                    email 'zihong87@gmail.com'                               // #CONFIG# // your email
                }
            }

            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }

        }
    }
}



task androidJavadocs(type: Javadoc) {
    options {
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"

    }
    failOnError false
    source = source = android.sourceSets.main.java.srcDirs
    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    classpath += files(project.getConfigurations().getByName('compile').asList())
    //        include '**/*.java'
    //        exclude '**/BuildConfig.java'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
//        include '**/*.java'
}

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
        from variant.javaCompile.destinationDir
    }
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

//def isSnapshotBuild() {
//    return version.contains("SNAPSHOT")
//}

